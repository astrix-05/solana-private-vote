{"ast":null,"code":"var _jsxFileName = \"/Users/astrix_05/solana-private-vote/app/src/contexts/WalletProvider.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { PublicKey, Connection } from '@solana/web3.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletContext = /*#__PURE__*/createContext(undefined);\nexport const useWallet = () => {\n  _s();\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error('useWallet must be used within a WalletProvider');\n  }\n  return context;\n};\n_s(useWallet, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const WalletProvider = ({\n  children\n}) => {\n  _s2();\n  const [publicKey, setPublicKey] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [connection, setConnection] = useState(null);\n  useEffect(() => {\n    // Initialize connection\n    const conn = new Connection(process.env.REACT_APP_SOLANA_RPC_URL || 'https://api.devnet.solana.com', 'confirmed');\n    setConnection(conn);\n\n    // Try to connect to Phantom wallet\n    const tryConnect = async () => {\n      if (typeof window !== 'undefined' && window.solana && window.solana.isPhantom) {\n        try {\n          const wallet = window.solana;\n          const response = await wallet.connect({\n            onlyIfTrusted: true\n          });\n          setPublicKey(new PublicKey(response.publicKey.toString()));\n          setConnected(true);\n        } catch (err) {\n          console.log('Auto-connect failed:', err);\n        }\n      }\n    };\n    tryConnect();\n  }, []);\n  const connect = useCallback(async () => {\n    if (typeof window !== 'undefined' && window.solana && window.solana.isPhantom) {\n      try {\n        const wallet = window.solana;\n        const response = await wallet.connect();\n        setPublicKey(new PublicKey(response.publicKey.toString()));\n        setConnected(true);\n      } catch (err) {\n        console.error('Failed to connect:', err);\n        throw err;\n      }\n    } else {\n      alert('Please install Phantom wallet from https://phantom.app/');\n    }\n  }, []);\n  const disconnect = useCallback(async () => {\n    if (typeof window !== 'undefined' && window.solana) {\n      try {\n        await window.solana.disconnect();\n        setPublicKey(null);\n        setConnected(false);\n      } catch (err) {\n        console.error('Failed to disconnect:', err);\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: {\n      publicKey,\n      connected,\n      connect,\n      disconnect,\n      connection\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s2(WalletProvider, \"8I7uYA+riBuHUEBB+g7QY8P5OL8=\");\n_c = WalletProvider;\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","PublicKey","Connection","jsxDEV","_jsxDEV","WalletContext","undefined","useWallet","_s","context","Error","WalletProvider","children","_s2","publicKey","setPublicKey","connected","setConnected","connection","setConnection","conn","process","env","REACT_APP_SOLANA_RPC_URL","tryConnect","window","solana","isPhantom","wallet","response","connect","onlyIfTrusted","toString","err","console","log","error","alert","disconnect","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/astrix_05/solana-private-vote/app/src/contexts/WalletProvider.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback, ReactNode } from 'react';\nimport { PublicKey, Connection } from '@solana/web3.js';\n\ninterface WalletContextType {\n  publicKey: PublicKey | null;\n  connected: boolean;\n  connect: () => Promise<void>;\n  disconnect: () => Promise<void>;\n  connection: Connection | null;\n}\n\nconst WalletContext = createContext<WalletContextType | undefined>(undefined);\n\nexport const useWallet = () => {\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error('useWallet must be used within a WalletProvider');\n  }\n  return context;\n};\n\ninterface WalletProviderProps {\n  children: ReactNode;\n}\n\nexport const WalletProvider: React.FC<WalletProviderProps> = ({ children }) => {\n  const [publicKey, setPublicKey] = useState<PublicKey | null>(null);\n  const [connected, setConnected] = useState(false);\n  const [connection, setConnection] = useState<Connection | null>(null);\n\n  useEffect(() => {\n    // Initialize connection\n    const conn = new Connection(\n      process.env.REACT_APP_SOLANA_RPC_URL || 'https://api.devnet.solana.com',\n      'confirmed'\n    );\n    setConnection(conn);\n\n    // Try to connect to Phantom wallet\n    const tryConnect = async () => {\n      if (typeof window !== 'undefined' && (window as any).solana && (window as any).solana.isPhantom) {\n        try {\n          const wallet = (window as any).solana;\n          const response = await wallet.connect({ onlyIfTrusted: true });\n          setPublicKey(new PublicKey(response.publicKey.toString()));\n          setConnected(true);\n        } catch (err) {\n          console.log('Auto-connect failed:', err);\n        }\n      }\n    };\n\n    tryConnect();\n  }, []);\n\n  const connect = useCallback(async () => {\n    if (typeof window !== 'undefined' && (window as any).solana && (window as any).solana.isPhantom) {\n      try {\n        const wallet = (window as any).solana;\n        const response = await wallet.connect();\n        setPublicKey(new PublicKey(response.publicKey.toString()));\n        setConnected(true);\n      } catch (err) {\n        console.error('Failed to connect:', err);\n        throw err;\n      }\n    } else {\n      alert('Please install Phantom wallet from https://phantom.app/');\n    }\n  }, []);\n\n  const disconnect = useCallback(async () => {\n    if (typeof window !== 'undefined' && (window as any).solana) {\n      try {\n        await (window as any).solana.disconnect();\n        setPublicKey(null);\n        setConnected(false);\n      } catch (err) {\n        console.error('Failed to disconnect:', err);\n      }\n    }\n  }, []);\n\n  return (\n    <WalletContext.Provider value={{ publicKey, connected, connect, disconnect, connection }}>\n      {children}\n    </WalletContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}