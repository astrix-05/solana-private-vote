{"ast":null,"code":"var _jsxFileName = \"/Users/astrix_05/solana-private-vote/app/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Header from './components/Header';\nimport CreatePoll from './components/CreatePoll';\nimport VotePoll from './components/VotePoll';\nimport ManagePolls from './components/ManagePolls';\nimport ViewResults from './components/ViewResults';\nimport Notification from './components/Notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentView, setCurrentView] = useState('create');\n  const [notification, setNotification] = useState(null);\n  const showNotification = (type, message, duration = 5000) => {\n    setNotification({\n      type,\n      message,\n      duration\n    });\n    setTimeout(() => setNotification(null), duration);\n  };\n  const handleCreatePoll = async pollData => {\n    console.log('Creating poll:', pollData);\n    showNotification('success', 'Poll created successfully! (Demo mode)');\n    setTimeout(() => setCurrentView('manage'), 2000);\n  };\n  const handleVote = async (pollAddress, selectedOption) => {\n    console.log('Voting:', pollAddress, selectedOption);\n    showNotification('success', 'Vote cast successfully! (Demo mode)');\n  };\n  const handleClosePoll = async pollAddress => {\n    console.log('Closing poll:', pollAddress);\n    showNotification('success', 'Poll closed successfully! (Demo mode)');\n  };\n  const handleRevealResults = async pollAddress => {\n    console.log('Revealing results:', pollAddress);\n    showNotification('success', 'Results revealed! (Demo mode)');\n    setTimeout(() => setCurrentView('results'), 2000);\n  };\n  const renderCurrentView = () => {\n    switch (currentView) {\n      case 'create':\n        return /*#__PURE__*/_jsxDEV(CreatePoll, {\n          onSubmit: handleCreatePoll\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 16\n        }, this);\n      case 'vote':\n        return /*#__PURE__*/_jsxDEV(VotePoll, {\n          onVote: handleVote\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 16\n        }, this);\n      case 'manage':\n        return /*#__PURE__*/_jsxDEV(ManagePolls, {\n          onClosePoll: handleClosePoll,\n          onRevealResults: handleRevealResults\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 16\n        }, this);\n      case 'results':\n        return /*#__PURE__*/_jsxDEV(ViewResults, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(CreatePoll, {\n          onSubmit: handleCreatePoll\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-50\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      currentView: currentView,\n      onViewChange: setCurrentView,\n      isInitialized: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container mx-auto px-4 py-8\",\n      children: renderCurrentView()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), notification && /*#__PURE__*/_jsxDEV(Notification, {\n      type: notification.type,\n      message: notification.message,\n      onClose: () => setNotification(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0/1LhewM7XZcuLzJFB6OJoku2qw=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","CreatePoll","VotePoll","ManagePolls","ViewResults","Notification","jsxDEV","_jsxDEV","App","_s","currentView","setCurrentView","notification","setNotification","showNotification","type","message","duration","setTimeout","handleCreatePoll","pollData","console","log","handleVote","pollAddress","selectedOption","handleClosePoll","handleRevealResults","renderCurrentView","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","onVote","onClosePoll","onRevealResults","className","children","onViewChange","isInitialized","onClose","_c","$RefreshReg$"],"sources":["/Users/astrix_05/solana-private-vote/app/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport type { ViewMode, NotificationState } from './types';\nimport Header from './components/Header';\nimport CreatePoll from './components/CreatePoll';\nimport VotePoll from './components/VotePoll';\nimport ManagePolls from './components/ManagePolls';\nimport ViewResults from './components/ViewResults';\nimport Notification from './components/Notification';\n\nfunction App() {\n  const [currentView, setCurrentView] = useState<ViewMode>('create');\n  const [notification, setNotification] = useState<NotificationState | null>(null);\n\n  const showNotification = (type: NotificationState['type'], message: string, duration = 5000) => {\n    setNotification({ type, message, duration });\n    setTimeout(() => setNotification(null), duration);\n  };\n\n  const handleCreatePoll = async (pollData: { question: string; options: string[] }) => {\n    console.log('Creating poll:', pollData);\n    showNotification('success', 'Poll created successfully! (Demo mode)');\n    setTimeout(() => setCurrentView('manage'), 2000);\n  };\n\n  const handleVote = async (pollAddress: string, selectedOption: number) => {\n    console.log('Voting:', pollAddress, selectedOption);\n    showNotification('success', 'Vote cast successfully! (Demo mode)');\n  };\n\n  const handleClosePoll = async (pollAddress: string) => {\n    console.log('Closing poll:', pollAddress);\n    showNotification('success', 'Poll closed successfully! (Demo mode)');\n  };\n\n  const handleRevealResults = async (pollAddress: string) => {\n    console.log('Revealing results:', pollAddress);\n    showNotification('success', 'Results revealed! (Demo mode)');\n    setTimeout(() => setCurrentView('results'), 2000);\n  };\n\n  const renderCurrentView = () => {\n    switch (currentView) {\n      case 'create':\n        return <CreatePoll onSubmit={handleCreatePoll} />;\n      case 'vote':\n        return <VotePoll onVote={handleVote} />;\n      case 'manage':\n        return <ManagePolls onClosePoll={handleClosePoll} onRevealResults={handleRevealResults} />;\n      case 'results':\n        return <ViewResults />;\n      default:\n        return <CreatePoll onSubmit={handleCreatePoll} />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header \n        currentView={currentView} \n        onViewChange={setCurrentView}\n        isInitialized={true}\n      />\n      \n      <main className=\"container mx-auto px-4 py-8\">\n        {renderCurrentView()}\n      </main>\n\n      {notification && (\n        <Notification\n          type={notification.type}\n          message={notification.message}\n          onClose={() => setNotification(null)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}